input ComponentPricesPriceInput {
  _: String
}

type ComponentPricesPrices {
  id: ID!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input createEnSchoolInput {
  data: EnSchoolInput
}

type createEnSchoolPayload {
  enSchool: EnSchools
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createTrSchoolInput {
  data: TrSchoolInput
}

type createTrSchoolPayload {
  trSchool: TrSchools
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input deleteEnSchoolInput {
  where: InputID
}

type deleteEnSchoolPayload {
  enSchool: EnSchools
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteTrSchoolInput {
  where: InputID
}

type deleteTrSchoolPayload {
  trSchool: TrSchools
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editComponentPricesPriceInput {
  id: ID
}

input editEnSchoolInput {
  shortName: String
  active: Boolean
  name: String
  popularity: Int
  foundYear: String
  capacity: String
  latitude: String
  longitute: String
  photo: ID
  detailsLink: String
  prices: JSON
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: Float
  url: String
  provider: String
  provider_metadata: JSON
  related: [ID]
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editTrSchoolInput {
  shortName: String
  active: Boolean
  name: String
  popularity: Int
  foundYear: String
  capacity: String
  latitude: String
  longitute: String
  photo: ID
  detailsLink: String
  prices: JSON
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input EnSchoolInput {
  shortName: String
  active: Boolean
  name: String
  popularity: Int
  foundYear: String
  capacity: String
  latitude: String
  longitute: String
  photo: ID
  detailsLink: String
  prices: JSON
}

type EnSchools {
  shortName: String
  active: Boolean
  name: String
  popularity: Int
  foundYear: String
  capacity: String
  latitude: String
  longitute: String
  photo: UploadFile
  detailsLink: String
  prices: JSON
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EnSchoolsAggregator {
  count: Int
  totalCount: Int
  sum: EnSchoolsAggregatorSum
  avg: EnSchoolsAggregatorAvg
  min: EnSchoolsAggregatorMin
  max: EnSchoolsAggregatorMax
}

type EnSchoolsAggregatorAvg {
  popularity: Float
}

type EnSchoolsAggregatorMax {
  popularity: Float
}

type EnSchoolsAggregatorMin {
  popularity: Float
}

type EnSchoolsAggregatorSum {
  popularity: Float
}

type EnSchoolsConnection {
  values: [EnSchools]
  groupBy: EnSchoolsGroupBy
  aggregate: EnSchoolsAggregator
}

type EnSchoolsConnection_id {
  key: ID
  connection: EnSchoolsConnection
}

type EnSchoolsConnectionActive {
  key: Boolean
  connection: EnSchoolsConnection
}

type EnSchoolsConnectionCapacity {
  key: String
  connection: EnSchoolsConnection
}

type EnSchoolsConnectionCreatedAt {
  key: DateTime
  connection: EnSchoolsConnection
}

type EnSchoolsConnectionDetailsLink {
  key: String
  connection: EnSchoolsConnection
}

type EnSchoolsConnectionFoundYear {
  key: String
  connection: EnSchoolsConnection
}

type EnSchoolsConnectionId {
  key: ID
  connection: EnSchoolsConnection
}

type EnSchoolsConnectionLatitude {
  key: String
  connection: EnSchoolsConnection
}

type EnSchoolsConnectionLongitute {
  key: String
  connection: EnSchoolsConnection
}

type EnSchoolsConnectionName {
  key: String
  connection: EnSchoolsConnection
}

type EnSchoolsConnectionPhoto {
  key: ID
  connection: EnSchoolsConnection
}

type EnSchoolsConnectionPopularity {
  key: Int
  connection: EnSchoolsConnection
}

type EnSchoolsConnectionPrices {
  key: JSON
  connection: EnSchoolsConnection
}

type EnSchoolsConnectionShortName {
  key: String
  connection: EnSchoolsConnection
}

type EnSchoolsConnectionUpdatedAt {
  key: DateTime
  connection: EnSchoolsConnection
}

type EnSchoolsGroupBy {
  shortName: [EnSchoolsConnectionShortName]
  active: [EnSchoolsConnectionActive]
  name: [EnSchoolsConnectionName]
  popularity: [EnSchoolsConnectionPopularity]
  foundYear: [EnSchoolsConnectionFoundYear]
  capacity: [EnSchoolsConnectionCapacity]
  latitude: [EnSchoolsConnectionLatitude]
  longitute: [EnSchoolsConnectionLongitute]
  photo: [EnSchoolsConnectionPhoto]
  detailsLink: [EnSchoolsConnectionDetailsLink]
  prices: [EnSchoolsConnectionPrices]
  _id: [EnSchoolsConnection_id]
  id: [EnSchoolsConnectionId]
  createdAt: [EnSchoolsConnectionCreatedAt]
  updatedAt: [EnSchoolsConnectionUpdatedAt]
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | EnSchools | createEnSchoolPayload | updateEnSchoolPayload | deleteEnSchoolPayload | EnSchoolsConnection | EnSchoolsAggregator | EnSchoolsAggregatorSum | EnSchoolsAggregatorAvg | EnSchoolsAggregatorMin | EnSchoolsAggregatorMax | EnSchoolsGroupBy | EnSchoolsConnectionShortName | EnSchoolsConnectionActive | EnSchoolsConnectionName | EnSchoolsConnectionPopularity | EnSchoolsConnectionFoundYear | EnSchoolsConnectionCapacity | EnSchoolsConnectionLatitude | EnSchoolsConnectionLongitute | EnSchoolsConnectionPhoto | EnSchoolsConnectionDetailsLink | EnSchoolsConnectionPrices | EnSchoolsConnection_id | EnSchoolsConnectionId | EnSchoolsConnectionCreatedAt | EnSchoolsConnectionUpdatedAt | TrSchools | createTrSchoolPayload | updateTrSchoolPayload | deleteTrSchoolPayload | TrSchoolsConnection | TrSchoolsAggregator | TrSchoolsAggregatorSum | TrSchoolsAggregatorAvg | TrSchoolsAggregatorMin | TrSchoolsAggregatorMax | TrSchoolsGroupBy | TrSchoolsConnectionShortName | TrSchoolsConnectionActive | TrSchoolsConnectionName | TrSchoolsConnectionPopularity | TrSchoolsConnectionFoundYear | TrSchoolsConnectionCapacity | TrSchoolsConnectionLatitude | TrSchoolsConnectionLongitute | TrSchoolsConnectionPhoto | TrSchoolsConnectionDetailsLink | TrSchoolsConnectionPrices | TrSchoolsConnection_id | TrSchoolsConnectionId | TrSchoolsConnectionCreatedAt | TrSchoolsConnectionUpdatedAt | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileGroupBy | UploadFileConnectionName | UploadFileConnectionHash | UploadFileConnectionSha256 | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnection_id | UploadFileConnectionId | UploadFileConnectionCreatedAt | UploadFileConnectionUpdatedAt | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnection_id | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionCreatedAt | UsersPermissionsRoleConnectionUpdatedAt | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnection_id | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionUpdatedAt

type Mutation {
  createEnSchool(input: createEnSchoolInput): createEnSchoolPayload
  updateEnSchool(input: updateEnSchoolInput): updateEnSchoolPayload
  deleteEnSchool(input: deleteEnSchoolInput): deleteEnSchoolPayload
  createTrSchool(input: createTrSchoolInput): createTrSchoolPayload
  updateTrSchool(input: updateTrSchoolInput): updateTrSchoolPayload
  deleteTrSchool(input: deleteTrSchoolInput): deleteTrSchoolPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UserInput!): UsersPermissionsLoginPayload!
}

type Query {
  enSchool(id: ID!): EnSchools
  enSchools(sort: String, limit: Int, start: Int, where: JSON): [EnSchools]
  enSchoolsConnection(sort: String, limit: Int, start: Int, where: JSON): EnSchoolsConnection
  trSchool(id: ID!): TrSchools
  trSchools(sort: String, limit: Int, start: Int, where: JSON): [TrSchools]
  trSchoolsConnection(sort: String, limit: Int, start: Int, where: JSON): TrSchoolsConnection
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

input TrSchoolInput {
  shortName: String
  active: Boolean
  name: String
  popularity: Int
  foundYear: String
  capacity: String
  latitude: String
  longitute: String
  photo: ID
  detailsLink: String
  prices: JSON
}

type TrSchools {
  shortName: String
  active: Boolean
  name: String
  popularity: Int
  foundYear: String
  capacity: String
  latitude: String
  longitute: String
  photo: UploadFile
  detailsLink: String
  prices: JSON
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TrSchoolsAggregator {
  count: Int
  totalCount: Int
  sum: TrSchoolsAggregatorSum
  avg: TrSchoolsAggregatorAvg
  min: TrSchoolsAggregatorMin
  max: TrSchoolsAggregatorMax
}

type TrSchoolsAggregatorAvg {
  popularity: Float
}

type TrSchoolsAggregatorMax {
  popularity: Float
}

type TrSchoolsAggregatorMin {
  popularity: Float
}

type TrSchoolsAggregatorSum {
  popularity: Float
}

type TrSchoolsConnection {
  values: [TrSchools]
  groupBy: TrSchoolsGroupBy
  aggregate: TrSchoolsAggregator
}

type TrSchoolsConnection_id {
  key: ID
  connection: TrSchoolsConnection
}

type TrSchoolsConnectionActive {
  key: Boolean
  connection: TrSchoolsConnection
}

type TrSchoolsConnectionCapacity {
  key: String
  connection: TrSchoolsConnection
}

type TrSchoolsConnectionCreatedAt {
  key: DateTime
  connection: TrSchoolsConnection
}

type TrSchoolsConnectionDetailsLink {
  key: String
  connection: TrSchoolsConnection
}

type TrSchoolsConnectionFoundYear {
  key: String
  connection: TrSchoolsConnection
}

type TrSchoolsConnectionId {
  key: ID
  connection: TrSchoolsConnection
}

type TrSchoolsConnectionLatitude {
  key: String
  connection: TrSchoolsConnection
}

type TrSchoolsConnectionLongitute {
  key: String
  connection: TrSchoolsConnection
}

type TrSchoolsConnectionName {
  key: String
  connection: TrSchoolsConnection
}

type TrSchoolsConnectionPhoto {
  key: ID
  connection: TrSchoolsConnection
}

type TrSchoolsConnectionPopularity {
  key: Int
  connection: TrSchoolsConnection
}

type TrSchoolsConnectionPrices {
  key: JSON
  connection: TrSchoolsConnection
}

type TrSchoolsConnectionShortName {
  key: String
  connection: TrSchoolsConnection
}

type TrSchoolsConnectionUpdatedAt {
  key: DateTime
  connection: TrSchoolsConnection
}

type TrSchoolsGroupBy {
  shortName: [TrSchoolsConnectionShortName]
  active: [TrSchoolsConnectionActive]
  name: [TrSchoolsConnectionName]
  popularity: [TrSchoolsConnectionPopularity]
  foundYear: [TrSchoolsConnectionFoundYear]
  capacity: [TrSchoolsConnectionCapacity]
  latitude: [TrSchoolsConnectionLatitude]
  longitute: [TrSchoolsConnectionLongitute]
  photo: [TrSchoolsConnectionPhoto]
  detailsLink: [TrSchoolsConnectionDetailsLink]
  prices: [TrSchoolsConnectionPrices]
  _id: [TrSchoolsConnection_id]
  id: [TrSchoolsConnectionId]
  createdAt: [TrSchoolsConnectionCreatedAt]
  updatedAt: [TrSchoolsConnectionUpdatedAt]
}

input updateEnSchoolInput {
  where: InputID
  data: editEnSchoolInput
}

type updateEnSchoolPayload {
  enSchool: EnSchools
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateTrSchoolInput {
  where: InputID
  data: editTrSchoolInput
}

type updateTrSchoolPayload {
  trSchool: TrSchools
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: Float!
  url: String!
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnection_id {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSha256 {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdatedAt {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  name: [UploadFileConnectionName]
  hash: [UploadFileConnectionHash]
  sha256: [UploadFileConnectionSha256]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  _id: [UploadFileConnection_id]
  id: [UploadFileConnectionId]
  createdAt: [UploadFileConnectionCreatedAt]
  updatedAt: [UploadFileConnectionUpdatedAt]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnection_id {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionCreatedAt {
  key: DateTime
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionUpdatedAt {
  key: DateTime
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
  _id: [UsersPermissionsRoleConnection_id]
  id: [UsersPermissionsRoleConnectionId]
  createdAt: [UsersPermissionsRoleConnectionCreatedAt]
  updatedAt: [UsersPermissionsRoleConnectionUpdatedAt]
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
  _id: ID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnection_id {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdatedAt {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
  _id: [UsersPermissionsUserConnection_id]
  id: [UsersPermissionsUserConnectionId]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
}
